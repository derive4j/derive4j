
defaultTasks 'build'

ext {
}

buildscript {
    ext {
        uptodateVersion = "1.6.2"
    }

    repositories {
        mavenLocal()
        jcenter()
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

    dependencies {
        classpath "com.ofg:uptodate-gradle-plugin:$uptodateVersion"
        classpath "net.ltgt.gradle:gradle-apt-plugin:0.9"
        classpath "nl.javadude.gradle.plugins:license-gradle-plugin:0.11.0"
        classpath "org.jfrog.buildinfo:build-info-extractor-gradle:3.1.0"
    }

    wrapper {
        gradleVersion = "3.5"
    }
}

allprojects {

    apply plugin: 'com.jfrog.artifactory-upload'
    apply plugin: "idea"
    apply plugin: 'jacoco'

    defaultTasks "build"

    ext {
        isSnapshot = true
        d4jBaseVersion = "0.12.3"

        snapshotAppendix = "-SNAPSHOT"
        d4jVersion = d4jBaseVersion + (isSnapshot ? snapshotAppendix : "")

        projectTitle = "Derive4J"
        projectName = "derive4j"
        pomProjectName = projectTitle
        pomOrganisation = "Derive4J contributors"
        projectDescription = "Annotation processor and framework for deriving algebraic data types constructors, morphisms, optics and typeclasses"
        projectUrl = "https://github.com/derive4j/derive4j"
        scmUrl = "git://github.com/derive4j/derive4j.git"
        scmGitFile = "scm:git@github.com:derive4j/derive4j.git"

        primaryEmail = "jb@giraudeau.info"

        dependencyJavaPoet = "com.squareup:javapoet:1.8.0"
        dependencyPreviousDerive4J = "org.derive4j:derive4j:0.12.1"
        dependencyJunit = "junit:junit:4.12"
        dependencyAutoService = "com.google.auto.service:auto-service:1.0-rc2"

        gplLicenseName = "The GNU General Public License"
        lgplLicenseName = "The GNU Lesser General Public License"
        bsd3LicenseName = "The BSD3 License"

        displayCompilerWarnings = true
    }

    repositories {
        jcenter()
        mavenCentral()
        mavenLocal()
    }

    version = d4jVersion
    group = "org.derive4j"

}

artifactoryPublish.skip = true

subprojects {

    apply plugin: "net.ltgt.apt"

    apply from: "$rootDir/lib.gradle"
    apply plugin: "java"
    apply plugin: "eclipse"
    apply plugin: "idea"
    apply plugin: "com.ofg.uptodate"
    apply plugin: "license"
    apply plugin: "com.jfrog.artifactory"

    repositories {
        mavenLocal()
        jcenter()
        mavenCentral()
    }

    if (displayCompilerWarnings) {
        tasks.withType(JavaCompile) {
            options.compilerArgs << "-Xlint:all"
        }
    }

    license {
        header project.file('etc/HEADER.txt')
        strictCheck true
        ignoreFailures true
        mapping {
            java = 'SLASHSTAR_STYLE'
        }
    }

}

configure(subprojects) {

    apply plugin: "maven"
    apply plugin: "osgi"

    sourceCompatibility = "1.8"

    task javadocJar(type: Jar, dependsOn: "javadoc") {
        classifier = 'javadoc'
        from "build/docs/javadoc"
    }

    task sourcesJar(type: Jar) {
        from sourceSets.main.allSource
        classifier = 'sources'
    }

    artifacts {
        archives jar
        archives javadocJar
        archives sourcesJar
    }

    jar {
        version project.d4jVersion
        manifest {
            name = 'Derive for Java'
            instruction 'Signature-Version', project.d4jVersion
            instruction 'Bundle-ActivationPolicy', 'lazy'
            instruction 'Bundle-Vendor', 'derive4j.org'
            if(project.name != "processor") {
                instruction 'Require-Bundle', 'org.derive4j;bundle-version="'+project.d4jBaseVersion+'"'
            }
        }
    }

    eclipse {
        project {
            natures 'org.eclipse.pde.PluginNature'
            buildCommand 'org.eclipse.pde.ManifestBuilder'
            buildCommand 'org.eclipse.pde.SchemaBuilder'
        }
    }

    // Output MANIFEST.MF statically so eclipse can see it for plugin development
    task eclipsePluginManifest(dependsOn: jar) << {
        file("META-INF").mkdirs()
        jar.manifest.writeTo(file("META-INF/MANIFEST.MF"))
    }

    eclipseProject.dependsOn eclipsePluginManifest

    artifactoryPublish {
        dependsOn sourcesJar, javadocJar
    }
}

task codeCoverageReport(type: JacocoReport) {
    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

    subprojects.each {
        sourceSets it.sourceSets.main
    }

    reports {
        xml.enabled true
        xml.destination "${buildDir}/reports/jacoco/report.xml"
        html.enabled false
        csv.enabled false
    }
}

codeCoverageReport.dependsOn {
    subprojects*.test
}

artifactory {
    contextUrl = 'http://oss.jfrog.org/artifactory'   //The base Artifactory URL if not overridden by the publisher/resolver
    publish {
        repository {
            // The Artifactory repository key to publish to :
            if (isSnapshot) {
                repoKey = 'oss-snapshot-local'
            } else {
                repoKey = 'oss-release-local'
            }
            username = jfrogUsername         //The publisher user name
            password = jfrogPassword      //The publisher password
        }
        defaults {
            publishConfigs('archives')
            //publishIvy = false
        }
    }
    resolve {
        repository {
            repoKey = 'libs-releases'  //The Artifactory (preferably virtual) repository key to resolve from
        }
    }
}

task env << {
    println System.getenv()
}
